// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/SuperJourney/gopen/repo/model"
)

func newAttr(db *gorm.DB, opts ...gen.DOOption) attr {
	_attr := attr{}

	_attr.attrDo.UseDB(db, opts...)
	_attr.attrDo.UseModel(&model.Attr{})

	tableName := _attr.attrDo.TableName()
	_attr.ALL = field.NewAsterisk(tableName)
	_attr.Type = field.NewInt32(tableName, "type")
	_attr.Name = field.NewString(tableName, "name")
	_attr.ContextType = field.NewInt32(tableName, "context_type")
	_attr.Context = field.NewString(tableName, "context")
	_attr.AppID = field.NewInt32(tableName, "app_id")
	_attr.SDParam = field.NewString(tableName, "sd_param")
	_attr.Tips = field.NewString(tableName, "tips")
	_attr.Ord = field.NewInt(tableName, "ord")
	_attr.ID = field.NewUint(tableName, "id")
	_attr.CreatedAt = field.NewTime(tableName, "created_at")
	_attr.UpdatedAt = field.NewTime(tableName, "updated_at")
	_attr.DeletedAt = field.NewField(tableName, "deleted_at")

	_attr.fillFieldMap()

	return _attr
}

type attr struct {
	attrDo

	ALL         field.Asterisk
	Type        field.Int32
	Name        field.String
	ContextType field.Int32
	Context     field.String
	AppID       field.Int32
	SDParam     field.String
	Tips        field.String
	Ord         field.Int
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field

	fieldMap map[string]field.Expr
}

func (a attr) Table(newTableName string) *attr {
	a.attrDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a attr) As(alias string) *attr {
	a.attrDo.DO = *(a.attrDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *attr) updateTableName(table string) *attr {
	a.ALL = field.NewAsterisk(table)
	a.Type = field.NewInt32(table, "type")
	a.Name = field.NewString(table, "name")
	a.ContextType = field.NewInt32(table, "context_type")
	a.Context = field.NewString(table, "context")
	a.AppID = field.NewInt32(table, "app_id")
	a.SDParam = field.NewString(table, "sd_param")
	a.Tips = field.NewString(table, "tips")
	a.Ord = field.NewInt(table, "ord")
	a.ID = field.NewUint(table, "id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")

	a.fillFieldMap()

	return a
}

func (a *attr) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *attr) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 12)
	a.fieldMap["type"] = a.Type
	a.fieldMap["name"] = a.Name
	a.fieldMap["context_type"] = a.ContextType
	a.fieldMap["context"] = a.Context
	a.fieldMap["app_id"] = a.AppID
	a.fieldMap["sd_param"] = a.SDParam
	a.fieldMap["tips"] = a.Tips
	a.fieldMap["ord"] = a.Ord
	a.fieldMap["id"] = a.ID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
}

func (a attr) clone(db *gorm.DB) attr {
	a.attrDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a attr) replaceDB(db *gorm.DB) attr {
	a.attrDo.ReplaceDB(db)
	return a
}

type attrDo struct{ gen.DO }

type IAttrDo interface {
	gen.SubQuery
	Debug() IAttrDo
	WithContext(ctx context.Context) IAttrDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAttrDo
	WriteDB() IAttrDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAttrDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAttrDo
	Not(conds ...gen.Condition) IAttrDo
	Or(conds ...gen.Condition) IAttrDo
	Select(conds ...field.Expr) IAttrDo
	Where(conds ...gen.Condition) IAttrDo
	Order(conds ...field.Expr) IAttrDo
	Distinct(cols ...field.Expr) IAttrDo
	Omit(cols ...field.Expr) IAttrDo
	Join(table schema.Tabler, on ...field.Expr) IAttrDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAttrDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAttrDo
	Group(cols ...field.Expr) IAttrDo
	Having(conds ...gen.Condition) IAttrDo
	Limit(limit int) IAttrDo
	Offset(offset int) IAttrDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAttrDo
	Unscoped() IAttrDo
	Create(values ...*model.Attr) error
	CreateInBatches(values []*model.Attr, batchSize int) error
	Save(values ...*model.Attr) error
	First() (*model.Attr, error)
	Take() (*model.Attr, error)
	Last() (*model.Attr, error)
	Find() ([]*model.Attr, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Attr, err error)
	FindInBatches(result *[]*model.Attr, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Attr) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAttrDo
	Assign(attrs ...field.AssignExpr) IAttrDo
	Joins(fields ...field.RelationField) IAttrDo
	Preload(fields ...field.RelationField) IAttrDo
	FirstOrInit() (*model.Attr, error)
	FirstOrCreate() (*model.Attr, error)
	FindByPage(offset int, limit int) (result []*model.Attr, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAttrDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a attrDo) Debug() IAttrDo {
	return a.withDO(a.DO.Debug())
}

func (a attrDo) WithContext(ctx context.Context) IAttrDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a attrDo) ReadDB() IAttrDo {
	return a.Clauses(dbresolver.Read)
}

func (a attrDo) WriteDB() IAttrDo {
	return a.Clauses(dbresolver.Write)
}

func (a attrDo) Session(config *gorm.Session) IAttrDo {
	return a.withDO(a.DO.Session(config))
}

func (a attrDo) Clauses(conds ...clause.Expression) IAttrDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a attrDo) Returning(value interface{}, columns ...string) IAttrDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a attrDo) Not(conds ...gen.Condition) IAttrDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a attrDo) Or(conds ...gen.Condition) IAttrDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a attrDo) Select(conds ...field.Expr) IAttrDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a attrDo) Where(conds ...gen.Condition) IAttrDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a attrDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAttrDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a attrDo) Order(conds ...field.Expr) IAttrDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a attrDo) Distinct(cols ...field.Expr) IAttrDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a attrDo) Omit(cols ...field.Expr) IAttrDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a attrDo) Join(table schema.Tabler, on ...field.Expr) IAttrDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a attrDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAttrDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a attrDo) RightJoin(table schema.Tabler, on ...field.Expr) IAttrDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a attrDo) Group(cols ...field.Expr) IAttrDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a attrDo) Having(conds ...gen.Condition) IAttrDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a attrDo) Limit(limit int) IAttrDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a attrDo) Offset(offset int) IAttrDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a attrDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAttrDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a attrDo) Unscoped() IAttrDo {
	return a.withDO(a.DO.Unscoped())
}

func (a attrDo) Create(values ...*model.Attr) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a attrDo) CreateInBatches(values []*model.Attr, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a attrDo) Save(values ...*model.Attr) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a attrDo) First() (*model.Attr, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Attr), nil
	}
}

func (a attrDo) Take() (*model.Attr, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Attr), nil
	}
}

func (a attrDo) Last() (*model.Attr, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Attr), nil
	}
}

func (a attrDo) Find() ([]*model.Attr, error) {
	result, err := a.DO.Find()
	return result.([]*model.Attr), err
}

func (a attrDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Attr, err error) {
	buf := make([]*model.Attr, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a attrDo) FindInBatches(result *[]*model.Attr, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a attrDo) Attrs(attrs ...field.AssignExpr) IAttrDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a attrDo) Assign(attrs ...field.AssignExpr) IAttrDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a attrDo) Joins(fields ...field.RelationField) IAttrDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a attrDo) Preload(fields ...field.RelationField) IAttrDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a attrDo) FirstOrInit() (*model.Attr, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Attr), nil
	}
}

func (a attrDo) FirstOrCreate() (*model.Attr, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Attr), nil
	}
}

func (a attrDo) FindByPage(offset int, limit int) (result []*model.Attr, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a attrDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a attrDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a attrDo) Delete(models ...*model.Attr) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *attrDo) withDO(do gen.Dao) *attrDo {
	a.DO = *do.(*gen.DO)
	return a
}
